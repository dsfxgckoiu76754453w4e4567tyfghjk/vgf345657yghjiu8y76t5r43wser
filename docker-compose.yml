version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shia-chatbot-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: shia_chatbot
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7.2-alpine
    container_name: shia-chatbot-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: shia-chatbot-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Langfuse (Observability - Optional)
  langfuse:
    image: langfuse/langfuse:latest
    container_name: shia-chatbot-langfuse
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/langfuse
      - NEXTAUTH_SECRET=changeme-in-production
      - NEXTAUTH_URL=http://localhost:3000
      - SALT=changeme-in-production
    depends_on:
      - postgres
    networks:
      - chatbot-network

  # FastAPI Application (uncomment after implementation)
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: shia-chatbot-app
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./src:/app/src
  #     - ./alembic:/app/alembic
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - redis
  #     - qdrant
  #   networks:
  #     - chatbot-network

networks:
  chatbot-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
